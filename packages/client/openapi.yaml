openapi: 3.0.3
info:
  title: Compute API
  description: |
    The Compute API provides a comprehensive interface for managing terminal sessions, file operations,
    file watching, sandboxes, and real-time communication via WebSockets.

    ## Authentication

    The API uses JWT-based authentication with a first-come-first-served bootstrap model:

    1. The first client to call `POST /auth/token` receives a JWT token
    2. Subsequent requests must include this token via:
       - **Recommended**: `Authorization: Bearer <token>` header
       - **Alternative**: `?token=<token>` query parameter (primarily for WebSocket connections)

    ## WebSocket Communication

    Many endpoints create resources that communicate via WebSocket channels. After creating a
    terminal, file watcher, or starting the signal service, subscribe to the returned channel
    via the WebSocket connection at `/ws`.
  version: 1.0.0
  contact:
    name: Compute SDK
    url: https://computesdk.com
  license:
    name: MIT

servers:
  - url: /
    description: Current server (relative URL)

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: Token generation and authentication status
  - name: Files
    description: File system operations (read, write, list, delete)
  - name: Terminals
    description: Terminal session management and command execution
  - name: File Watchers
    description: Real-time file system change notifications
  - name: Signals
    description: System signals and port notifications
  - name: Sandboxes
    description: Sandbox environment management (multi-tenant)
  - name: WebSocket
    description: Real-time bidirectional communication

paths:
  /:
    get:
      summary: Landing page
      description: Returns the landing page with information about available sandboxes
      tags:
        - Health
      responses:
        '200':
          description: HTML landing page
          content:
            text/html:
              schema:
                type: string

  /health:
    get:
      summary: Health check
      description: Returns the health status of the service
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /auth/token:
    post:
      summary: Generate authentication token
      description: |
        Generates a JWT token for authentication. This endpoint uses a first-come-first-served model:
        only the first client to call this endpoint will receive a token. Subsequent calls will fail
        with a 409 Conflict error.
      tags:
        - Authentication
      responses:
        '201':
          description: Token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '409':
          description: Token already generated for this instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/status:
    get:
      summary: Check token status
      description: Returns whether a token has been issued for this instance
      tags:
        - Authentication
      responses:
        '200':
          description: Token status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenStatusResponse'

  /auth/info:
    get:
      summary: Get authentication information
      description: Provides information about the authentication requirements and endpoints
      tags:
        - Authentication
      responses:
        '200':
          description: Authentication information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthInfoResponse'

  /ws:
    get:
      summary: WebSocket connection
      description: |
        Establishes a WebSocket connection for real-time bidirectional communication.

        ## Authentication
        Include the JWT token as a query parameter: `/ws?token=<token>`

        ## Channels
        After establishing a connection, subscribe to channels to receive events:
        - `terminal:<terminal_id>` - Terminal output and events
        - `watcher:<watcher_id>` - File change events
        - `signals` - System signals and port notifications

        ## Message Types

        ### Outgoing (Client → Server)
        - `terminal:input` - Send input to a terminal
        - `terminal:resize` - Resize terminal window

        ### Incoming (Server → Client)
        - `terminal:created` - Terminal created notification
        - `terminal:output` - Terminal output data
        - `terminal:destroyed` - Terminal destroyed notification
        - `terminal:error` - Terminal error notification
        - `watcher:created` - File watcher created notification
        - `file:changed` - File change event
        - `watcher:destroyed` - File watcher destroyed notification
        - `signal` - System signal event
        - `sandbox.created` - Sandbox created notification
        - `sandbox.deleted` - Sandbox deleted notification
      tags:
        - WebSocket
      security:
        - tokenQuery: []
      responses:
        '101':
          description: Switching Protocols - WebSocket connection established
        '401':
          description: Unauthorized - Invalid or missing token

  /execute:
    post:
      summary: Execute one-off command
      description: |
        Executes a single command without creating a persistent terminal session.
        A temporary terminal is created, the command is executed, and the terminal is cleaned up.
      tags:
        - Terminals
      security:
        - bearerAuth: []
        - tokenQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - command
              properties:
                command:
                  type: string
                  description: The command to execute
                  example: "ls -la"
                shell:
                  type: string
                  description: Shell to use (optional, defaults to system shell)
                  example: "/bin/bash"
      responses:
        '200':
          description: Command executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandExecutionResponse'
        '400':
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /files:
    get:
      summary: List files
      description: Lists files and directories at the specified path
      tags:
        - Files
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: path
          in: query
          description: Path to list (defaults to "/")
          schema:
            type: string
            default: "/"
            example: "/home/project"
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesListResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create file
      description: Creates a new file with optional content
      tags:
        - Files
      security:
        - bearerAuth: []
        - tokenQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - path
              properties:
                path:
                  type: string
                  description: Full path for the new file
                  example: "/home/project/test.txt"
                content:
                  type: string
                  description: File content (optional)
                  example: "Hello, World!"
      responses:
        '201':
          description: File created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /files/{id}:
    get:
      summary: Get file
      description: |
        Retrieves file metadata or content.
        - Without `content=true` query param: returns only metadata
        - With `content=true` query param: returns metadata and file content
      tags:
        - Files
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: id
          in: path
          required: true
          description: File path (URL-encoded)
          schema:
            type: string
            example: "/home/project/test.txt"
        - name: content
          in: query
          description: Whether to include file content
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: File retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update file
      description: Updates the content of an existing file
      tags:
        - Files
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: id
          in: path
          required: true
          description: File path (URL-encoded)
          schema:
            type: string
            example: "/home/project/test.txt"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: New file content
                  example: "Updated content"
      responses:
        '200':
          description: File updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete file
      description: Deletes a file or directory
      tags:
        - Files
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: id
          in: path
          required: true
          description: File path (URL-encoded)
          schema:
            type: string
            example: "/home/project/test.txt"
      responses:
        '204':
          description: File deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /terminals:
    post:
      summary: Create terminal
      description: |
        Creates a new persistent terminal session. Returns terminal details and WebSocket
        channel information. Connect to the WebSocket endpoint and subscribe to the returned
        channel to receive terminal output.
      tags:
        - Terminals
      security:
        - bearerAuth: []
        - tokenQuery: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                shell:
                  type: string
                  description: Shell to use (optional, defaults to system shell)
                  example: "/bin/bash"
      responses:
        '201':
          description: Terminal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TerminalResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /terminals/{id}:
    get:
      summary: Get terminal
      description: Retrieves terminal details and WebSocket channel information
      tags:
        - Terminals
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: id
          in: path
          required: true
          description: Terminal ID
          schema:
            type: string
      responses:
        '200':
          description: Terminal retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TerminalResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Terminal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete terminal
      description: Destroys a terminal session and cleans up resources
      tags:
        - Terminals
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: id
          in: path
          required: true
          description: Terminal ID
          schema:
            type: string
      responses:
        '204':
          description: Terminal deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Terminal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /terminals/{id}/execute:
    post:
      summary: Execute command in terminal
      description: |
        Executes a command in an existing terminal session. The output is returned
        in the response and also broadcast to WebSocket subscribers.
      tags:
        - Terminals
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: id
          in: path
          required: true
          description: Terminal ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - command
              properties:
                command:
                  type: string
                  description: The command to execute
                  example: "echo 'Hello, World!'"
      responses:
        '200':
          description: Command executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandExecutionResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /watchers:
    get:
      summary: List file watchers
      description: Returns a list of all active file watchers
      tags:
        - File Watchers
      security:
        - bearerAuth: []
        - tokenQuery: []
      responses:
        '200':
          description: File watchers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchersListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create file watcher
      description: |
        Creates a new file watcher for monitoring file system changes. Returns watcher
        details and WebSocket channel information. File change events will be broadcast
        to the WebSocket channel.
      tags:
        - File Watchers
      security:
        - bearerAuth: []
        - tokenQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - path
              properties:
                path:
                  type: string
                  description: Path to watch
                  example: "/home/project"
                includeContent:
                  type: boolean
                  description: Whether to include file content in change events
                  default: false
                ignored:
                  type: array
                  description: Patterns to ignore (e.g., ["node_modules", "*.log"])
                  items:
                    type: string
                  example: ["node_modules", ".git", "*.log"]
      responses:
        '201':
          description: File watcher created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatcherResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /watchers/{id}:
    get:
      summary: Get file watcher
      description: Retrieves file watcher details and WebSocket channel information
      tags:
        - File Watchers
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: id
          in: path
          required: true
          description: Watcher ID
          schema:
            type: string
      responses:
        '200':
          description: File watcher retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatcherResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: File watcher not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete file watcher
      description: Stops and removes a file watcher
      tags:
        - File Watchers
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: id
          in: path
          required: true
          description: Watcher ID
          schema:
            type: string
      responses:
        '204':
          description: File watcher deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: File watcher not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /signals/start:
    post:
      summary: Start signal service
      description: |
        Starts the signal service for monitoring system events and port changes.
        Subscribe to the "signals" WebSocket channel to receive events.
      tags:
        - Signals
      security:
        - bearerAuth: []
        - tokenQuery: []
      responses:
        '200':
          description: Signal service started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignalServiceResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /signals/stop:
    post:
      summary: Stop signal service
      description: Stops the signal service
      tags:
        - Signals
      security:
        - bearerAuth: []
        - tokenQuery: []
      responses:
        '200':
          description: Signal service stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignalServiceResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /signals/status:
    get:
      summary: Get signal service status
      description: Returns the current status of the signal service
      tags:
        - Signals
      security:
        - bearerAuth: []
        - tokenQuery: []
      responses:
        '200':
          description: Signal service status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignalServiceResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /signals/port:
    post:
      summary: Emit port signal
      description: Manually emits a port open/close signal
      tags:
        - Signals
      security:
        - bearerAuth: []
        - tokenQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - port
                - type
                - url
              properties:
                port:
                  type: integer
                  description: Port number
                  example: 3000
                type:
                  type: string
                  enum: [open, close]
                  description: Signal type
                  example: "open"
                url:
                  type: string
                  description: URL for the service
                  example: "http://localhost:3000"
      responses:
        '200':
          description: Port signal emitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortSignalResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /signals/error:
    post:
      summary: Emit error signal
      description: Emits an error signal to subscribed clients
      tags:
        - Signals
      security:
        - bearerAuth: []
        - tokenQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: Error message
                  example: "Failed to start service"
      responses:
        '200':
          description: Error signal emitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSignalResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /signals/server-ready:
    post:
      summary: Emit server ready signal
      description: Emits a server ready signal when a service is ready to accept connections
      tags:
        - Signals
      security:
        - bearerAuth: []
        - tokenQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - port
                - url
              properties:
                port:
                  type: integer
                  description: Port number
                  example: 8080
                url:
                  type: string
                  description: Service URL
                  example: "http://localhost:8080"
      responses:
        '200':
          description: Server ready signal emitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortSignalResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /signals/port/{port}/{type}:
    post:
      summary: Emit port signal (alternative endpoint)
      description: Simplified endpoint for emitting port signals using path parameters
      tags:
        - Signals
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: port
          in: path
          required: true
          description: Port number
          schema:
            type: integer
            example: 3000
        - name: type
          in: path
          required: true
          description: Signal type
          schema:
            type: string
            enum: [open, close]
            example: "open"
      responses:
        '200':
          description: Port signal emitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortSignalResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sandboxes:
    post:
      summary: Create sandbox
      description: |
        Creates a new sandbox environment with its own isolated filesystem.
        Available only in multi-tenant mode.
      tags:
        - Sandboxes
      security:
        - bearerAuth: []
        - tokenQuery: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '201':
          description: Sandbox created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SandboxResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: List sandboxes
      description: Returns a list of all sandboxes
      tags:
        - Sandboxes
      security:
        - bearerAuth: []
        - tokenQuery: []
      responses:
        '200':
          description: Sandboxes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SandboxesListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sandboxes/{subdomain}:
    get:
      summary: Get sandbox
      description: Retrieves details for a specific sandbox by subdomain
      tags:
        - Sandboxes
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: subdomain
          in: path
          required: true
          description: Sandbox subdomain
          schema:
            type: string
            example: "sandbox-12345"
      responses:
        '200':
          description: Sandbox retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SandboxResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sandbox not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete sandbox
      description: |
        Deletes a sandbox. Cannot delete the main sandbox.
        Use `delete_files=true` query parameter to also delete the sandbox files.
      tags:
        - Sandboxes
      security:
        - bearerAuth: []
        - tokenQuery: []
      parameters:
        - name: subdomain
          in: path
          required: true
          description: Sandbox subdomain
          schema:
            type: string
            example: "sandbox-12345"
        - name: delete_files
          in: query
          description: Whether to delete sandbox files
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: Sandbox deleted successfully
        '400':
          description: Bad request (e.g., attempting to delete main sandbox)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sandbox not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from POST /auth/token
    tokenQuery:
      type: apiKey
      in: query
      name: token
      description: JWT token as query parameter (primarily for WebSocket connections)

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "ok"
        timestamp:
          type: string
          format: date-time

    TokenResponse:
      type: object
      properties:
        message:
          type: string
          example: "Token generated successfully"
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expires_in:
              type: integer
              description: Token expiration time in seconds
              example: 86400
            usage:
              type: object
              properties:
                recommended:
                  type: string
                  example: "Authorization: Bearer <token>"
                alternative:
                  type: string
                  example: "?token=<token> (for WebSocket connections)"
                security_note:
                  type: string
                  example: "Header method preferred for better security"

    TokenStatusResponse:
      type: object
      properties:
        message:
          type: string
          example: "Token status"
        data:
          type: object
          properties:
            token_issued:
              type: boolean
              example: false
            status:
              type: string
              enum: [available, claimed]
              example: "available"
            available:
              type: boolean
              example: true

    AuthInfoResponse:
      type: object
      properties:
        message:
          type: string
          example: "Authentication information"
        data:
          type: object
          properties:
            message:
              type: string
              example: "This Sidekick instance uses bootstrap authentication"
            instructions:
              type: string
              example: "Generate a token with POST /auth/token (first client wins)"
            usage:
              type: object
              properties:
                header:
                  type: string
                  example: "Authorization: Bearer <token>"
                query:
                  type: string
                  example: "?token=<token>"
            endpoints:
              type: object
              properties:
                generate_token:
                  type: string
                  example: "POST /auth/token"
                check_status:
                  type: string
                  example: "GET /auth/status"
                info:
                  type: string
                  example: "GET /auth/info"

    FileInfo:
      type: object
      properties:
        name:
          type: string
          example: "test.txt"
        path:
          type: string
          example: "/home/project/test.txt"
        size:
          type: integer
          format: int64
          example: 1024
        is_dir:
          type: boolean
          example: false
        modified_at:
          type: string
          format: date-time

    FilesListResponse:
      type: object
      properties:
        message:
          type: string
          example: "List files"
        data:
          type: object
          properties:
            files:
              type: array
              items:
                $ref: '#/components/schemas/FileInfo'
            path:
              type: string
              example: "/home/project"

    FileResponse:
      type: object
      properties:
        message:
          type: string
          example: "File created"
        data:
          type: object
          properties:
            file:
              $ref: '#/components/schemas/FileInfo'
            content:
              type: string
              description: File content (only included when content=true query param is used)
              example: "Hello, World!"

    TerminalResponse:
      type: object
      properties:
        message:
          type: string
          example: "Terminal created"
        data:
          type: object
          properties:
            id:
              type: string
              example: "term_abc123"
            status:
              type: string
              enum: [running, stopped]
              example: "running"
            channel:
              type: string
              description: WebSocket channel name
              example: "terminal:term_abc123"
            ws_url:
              type: string
              description: WebSocket endpoint
              example: "/ws"

    CommandExecutionResponse:
      type: object
      properties:
        message:
          type: string
          example: "Command executed"
        data:
          type: object
          properties:
            terminal_id:
              type: string
              description: Terminal ID (only for /terminals/:id/execute)
              example: "term_abc123"
            command:
              type: string
              example: "ls -la"
            output:
              type: string
              description: Combined stdout and stderr (for backward compatibility)
              example: "total 16\ndrwxr-xr-x  4 user  staff  128 Jan 1 12:00 ."
            stdout:
              type: string
              description: Standard output
              example: "total 16\ndrwxr-xr-x  4 user  staff  128 Jan 1 12:00 ."
            stderr:
              type: string
              description: Standard error
              example: ""
            exit_code:
              type: integer
              example: 0
            duration_ms:
              type: integer
              description: Execution duration in milliseconds
              example: 123

    WatcherInfo:
      type: object
      properties:
        id:
          type: string
          example: "watcher_xyz789"
        path:
          type: string
          example: "/home/project"
        includeContent:
          type: boolean
          example: false
        ignored:
          type: array
          items:
            type: string
          example: ["node_modules", ".git"]
        status:
          type: string
          enum: [active, stopped]
          example: "active"
        channel:
          type: string
          description: WebSocket channel name
          example: "watcher:watcher_xyz789"

    WatcherResponse:
      type: object
      properties:
        message:
          type: string
          example: "File watcher created"
        data:
          allOf:
            - $ref: '#/components/schemas/WatcherInfo'
            - type: object
              properties:
                ws_url:
                  type: string
                  example: "/ws"

    WatchersListResponse:
      type: object
      properties:
        message:
          type: string
          example: "File watchers"
        data:
          type: object
          properties:
            watchers:
              type: array
              items:
                $ref: '#/components/schemas/WatcherInfo'

    SignalServiceResponse:
      type: object
      properties:
        message:
          type: string
          example: "Signal service started"
        data:
          type: object
          properties:
            status:
              type: string
              enum: [active, stopped]
              example: "active"
            channel:
              type: string
              example: "signals"
            ws_url:
              type: string
              example: "/ws"

    PortSignalResponse:
      type: object
      properties:
        message:
          type: string
          example: "Port signal emitted"
        data:
          type: object
          properties:
            port:
              type: integer
              example: 3000
            type:
              type: string
              enum: [open, close]
              example: "open"
            url:
              type: string
              example: "http://localhost:3000"

    GenericSignalResponse:
      type: object
      properties:
        message:
          type: string
          example: "Error signal emitted"
        data:
          type: object
          properties:
            message:
              type: string
              example: "Failed to start service"

    SandboxInfo:
      type: object
      properties:
        subdomain:
          type: string
          example: "sandbox-12345"
        directory:
          type: string
          example: "/path/to/sandboxes/sandbox-12345"
        is_main:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
        url:
          type: string
          example: "https://sandbox-12345.preview.computesdk.com"

    SandboxResponse:
      allOf:
        - $ref: '#/components/schemas/SandboxInfo'

    SandboxesListResponse:
      type: object
      properties:
        sandboxes:
          type: array
          items:
            $ref: '#/components/schemas/SandboxInfo'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Detailed error description"
